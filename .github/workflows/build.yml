name: Build

on: [push, pull_request]

jobs:
  # Build the program
  build-docker-cross:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [armv7-unknown-linux-musleabihf]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: cargo-bins/cargo-binstall@main
      - run: cargo bininstall cross
      - run: cross build --release --target="${{ matrix.target }}" --features="pid1,metrics"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.external
          context: target/${{ matrix.target }}/release/
          platforms: linux/arm/v7 #linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/dusterthefirst/mcproxy:alpha
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build the program
  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          target: runtime
          platforms: linux/arm/v7 #linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/dusterthefirst/mcproxy:alpha
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push alpine
        uses: docker/build-push-action@v6
        with:
          target: runtime-alpine
          platforms: linux/arm/v7 #linux/amd64,linux/arm64,
          push: true
          tags: ghcr.io/dusterthefirst/mcproxy:alpha-alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Test the program (after build)
  test:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
    - uses: actions/checkout@v1
    - name: Run tests
      run: cargo test --verbose
    - uses: actions/upload-artifact@master
      with:
        name: config-schema
        path: target/schema
  # Lint the program (after build)
  clippy:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
    - uses: actions/checkout@v1
    - name: Run clippy
      run: cargo clippy --verbose
  # Check code formatting (after build)
  rustfmt:
    runs-on: ubuntu-latest
    needs: build-docker
    continue-on-error: true
    steps:
    - uses: actions/checkout@v1
    - name: Check Rust formatting
      run: cargo fmt -- --check
  taplo-check:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v1
    - name: Install taplo
      run: curl -fsSL https://github.com/tamasfe/taplo/releases/latest/download/taplo-full-linux-x86_64.gz | gzip -d - | install -m 755 /dev/stdin /usr/local/bin/taplo
    - uses: actions/download-artifact@master
      with:
        name: config-schema
        path: target/schema
    - name: Run tests
      run: taplo check --verbose
