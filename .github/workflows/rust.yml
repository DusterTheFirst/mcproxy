name: Rust

on: [push, pull_request]

jobs:
  # Build the program
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: cargo build --verbose
  # Test the program (after build)
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v1
    - name: Run tests
      run: cargo test --verbose
  # Lint the program (after build)
  clippy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v1
    - name: Run clippy
      run: cargo clippy --verbose
  # Check code formatting (after build)
  rustfmt:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v1
    - name: Check Rust formatting
      run: cargo fmt -- --check
      id: check
      continue-on-error: true
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Fix Rust formatting
      if: job.steps.check.status == 'failure'
      run: cargo fmt
    - name: Commit changes
      if: job.steps.check.status == 'failure'
      run: git commit -m 'Fix rustfmt errors' --allow-empty
